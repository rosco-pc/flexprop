FlexProp help
=============

Menus
----

### File

The File menu should be pretty self explanatory. You can create a new file in a new tab with "New File" or open an existing file with "Open Spin file...". If you use "Open file..." with the current tab holding an empty, unmodified new file, the file will be opened in that tab, otherwise it will be opened in a new tab.

The default configuration always creates a listing file (.lst), which you can load into a window by selecting "Open Listing File" under the File menu. If the listing file window is open it will automatically be updated on every recompile.

The "Library directories..." entry allows you to pick a directories that will be searched for OBJ declarations and include files automatically.  The directories are searched in the order in which they are listed.

"Close tab" closes the currently selected tab.

"Exit" exits the program.

### Edit

The Edit menu is again pretty self-explanatory. The Undo/Redo functionality is quite limited; only one level of Redo is reliable, and trying to Redo again will produce unpredictable results.

### Options

The Options menu lets you change compiler and editor options, such as optimization level, debug mode, and warning levels.

#### Optimization

"No Optimization" is only recommended for checking for compiler bugs (if the program works with no optimization but fails with optimization enabled, then either there's a timing issue or a compiler bug).

"Default optimization" is the normal level of optimization, and is recommended.

"Full Optimization" will often produce faster code, but it will typically consume more resources (including COG memory).

#### Warnings

"No extra warnings" means the compiler will only warn about serious problems.

"Enable compatibility warnings" will cause the compiler to also warn about some differences between flexspin and the official Spin2 compiler. Fixing these warnings will make porting your code to the Parallax compiler easier (although there still may be issues!)

#### Runtime Character Set

The compiler's input is always Unicode (typically encoded as UTF-8), but at runtime some libraries may use other character sets. For example, when using a TV driver with the Parallax font it may be useful to use the Parallax OEM character set.

#### Floating Point

"Use IEEE floating point" is the default; the compiler uses IEEE format binary floating point for floating point values in all languages.

"Use 16.16 fixed point in place of floats" causes the compiler to use 16.16 fixed point values where it previously would use IEEE floating point. This means that floating point values are severely restricted in range, but it is much faster than true floating point. Use this option with some care, it is still experimental.

"Debug disabled" turns off all DEBUG messages in Spin2 files (this is the default).

"Debug enabled" turns on DEBUG, allowing the DEBUG() statements to be compiled and executed. Note that not all Spin2 DEBUG() commands are supported; see the general documentation for details.

#### Editor Options

The "Editor Options..." dialog allows you to change the way the source code editor looks, e.g. changing the font used for the text, or the tab settings. It also lets you change the font used for the compiler output window, and has an option to automatically load files changed by external programs (normally flexprop will prompt you to reload if it notices a change).

The "Save session on exit" option, if enabled, causes the editor to reload any previously open files each time it is started.

#### Use Internal Terminal

Older versions of FlexProp ran the loader with an external terminal program, such as cmd.exe on Windows. This is still an option, but there are also two built in (internal) terminal windows supported by FlexProp, an ANSI compatible one and a PST compatible one. They differ in what codes are used to control the cursor.

The built in terminals are still experimental and probably does not correctly interpret all escape sequences. However, they are able to detect and parse some of the Spin2 DEBUG commands, such as those to open a TERM or PLOT window.

### Commands

The Commands menu allow you to compile, run a binary, or both compile and run. The current file (the one in the currently selected tab) is always the one compiled, so it should be your top level file. It will be saved automatically before any compilation.

"Run Binary on device..." allows you to choose a binary that you compiled off-line (or that was compiled earlier) and run it on the device.

"Compile and Flash" and "Flash binary file..." are like the run options, but program the binary into the device.

### Ports

Presents a menu of serial ports that may be selected.  The default is to tell the loader program (loadp2 or proploader) to scan for a port to use. But you may override this by selecting a specific serial port.

If for some reason the port you wish to use is not listed (this may happen on Mac OS X, for example) then you can still override the port by configuring the command manually (using the Commands > Configure Commands... menu). In the "Run command" replace `%P` with `-p COM20` or `-p /dev/tty.usbmodem123` (or whatever the port you wish to use is).

The "Baud" submenu selects the speed to use. This defaults to 115200 baud for P1 and 230400 for P2.

The "Scan for ports" option checks for newly plugged in USB serial ports, and also looks for WX WiFi modules on the local network.

The "Add IP Address..." menu entry allows you to  explicitly add the IP address of a WiFi module. This may be either a numeric address or a symbolic one. To delete an existing IP address, enter its name with a blank address field. To replace one, just re-enter it with the same name but a new address.

### Special

The `Special` menu presents some options for interacting with P2 boards.

#### Enter P2 ROM TAQOZ

Opens a terminal window connected to the version of Peter Jakacki's Forth interpreter TAQOZ that is built into the P2 ROM.

#### Load current buffer into TAQOZ

Like "Enter P2 ROM TAQOZ", but after TAQOZ is started the text in the currently selected editor window is downloaded to TAQOZ as if the user had typed it.

#### Run proplisp on P2

Runs a Lisp interpreter on the P2. This is loaded from the `samples/proplisp` directory.

#### Load current buffer into proplisp

Like "Run proplisp on P2", but after Lisp is started the text in the currently selected editor window is downloaded to the P2 as if the user had typed it.

#### Enter ROM Monitor

Opens a terminal window connected to the built in P2 ROM debug monitor.

#### Terminal only

Opens a terminal window. Does not scan for a P2, so the port to use must be explicitly set in the `Port` menu.

Configuring Commands
--------------------

You can change the commands used for compiling and running programs. Since the commands are flexible, you can acutally use flexprop for compiling and running programs on the P1. The "P1 defaults" button sets the commands for this (you will need to supply propeller-load.exe yourself). "P2b defaults" restores the settings to the original Prop2 development. Use "P2a defaults" if you have an old (revision A) board.

Config File
-----------

Settings for flexprop are saved in a file called `.flexprop6.config`. This is searched for in the following places (in this order):

(1) If a file called `.flexprop6.config` already exists in the directory containing the `flexprop` executable, then that file is used. This provides an easy way to make a "portable" installation of FlexProp on a USB stick; just provide an empty `.flexprop6.config` next to `flexprop.exe`.

(2) Otherwise, if an environment variable called HOME exists then the config file is `$HOME/.flexprop6.config`.

(3) If no HOME environment variable is found, the directory where `flexprop.exe` is installed is used as the home for `.flexprop6.config`.

If something gets really messed up, deleting the `.flexprop6.config` file will restore flexprop to its default state.
